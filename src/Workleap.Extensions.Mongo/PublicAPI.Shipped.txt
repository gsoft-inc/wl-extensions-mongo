#nullable enable
abstract Workleap.Extensions.Mongo.NamedConventionPack.Name.get -> string!
abstract Workleap.Extensions.Mongo.NamedConventionPack.TypeFilter(System.Type! type) -> bool
const Workleap.Extensions.Mongo.MongoClientOptions.SectionName = "Mongo" -> string!
Workleap.Extensions.Mongo.AggregatorEventSubscriber
Workleap.Extensions.Mongo.AggregatorEventSubscriber.AggregatorEventSubscriber() -> void
Workleap.Extensions.Mongo.AggregatorEventSubscriber.Subscribe(MongoDB.Driver.Core.Events.IEventSubscriber! subscriber) -> void
Workleap.Extensions.Mongo.AggregatorEventSubscriber.Subscribe<TEvent>(System.Action<TEvent>! handler) -> void
Workleap.Extensions.Mongo.AggregatorEventSubscriber.TryGetEventHandler<TEvent>(out System.Action<TEvent>! handler) -> bool
Workleap.Extensions.Mongo.IMongoEventSubscriberFactory
Workleap.Extensions.Mongo.IMongoEventSubscriberFactory.CreateEventSubscribers(string! clientName) -> System.Collections.Generic.IEnumerable<MongoDB.Driver.Core.Events.IEventSubscriber!>!
Workleap.Extensions.Mongo.Indexing.IMongoIndexer
Workleap.Extensions.Mongo.Indexing.IMongoIndexer.UpdateIndexesAsync(System.Collections.Generic.IEnumerable<System.Reflection.Assembly!>! assemblies, string? clientName = null, string? databaseName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Workleap.Extensions.Mongo.Indexing.IMongoIndexer.UpdateIndexesAsync(System.Collections.Generic.IEnumerable<System.Type!>! types, string? clientName = null, string? databaseName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Workleap.Extensions.Mongo.Indexing.IMongoIndexer.UpdateIndexesAsync(System.Reflection.Assembly! assembly, string? clientName = null, string? databaseName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Workleap.Extensions.Mongo.MongoBuilder
Workleap.Extensions.Mongo.MongoBuilder.AddEncryptor<TEncryptor>() -> Workleap.Extensions.Mongo.MongoBuilder!
Workleap.Extensions.Mongo.MongoBuilder.AddNamedClient(string! clientName, System.Action<Workleap.Extensions.Mongo.MongoClientOptions!>? configure = null) -> Workleap.Extensions.Mongo.MongoBuilder!
Workleap.Extensions.Mongo.MongoBuilder.ConfigureStaticOptions(System.Action<Workleap.Extensions.Mongo.MongoStaticOptions!>! configure) -> Workleap.Extensions.Mongo.MongoBuilder!
Workleap.Extensions.Mongo.MongoBuilder.MongoBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
Workleap.Extensions.Mongo.MongoBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Workleap.Extensions.Mongo.MongoClientOptions
Workleap.Extensions.Mongo.MongoClientOptions.CommandPerformanceAnalysis.get -> Workleap.Extensions.Mongo.MongoCommandPerformanceAnalysisOptions!
Workleap.Extensions.Mongo.MongoClientOptions.ConnectionString.get -> string!
Workleap.Extensions.Mongo.MongoClientOptions.ConnectionString.set -> void
Workleap.Extensions.Mongo.MongoClientOptions.DefaultDatabaseName.get -> string!
Workleap.Extensions.Mongo.MongoClientOptions.DefaultDatabaseName.set -> void
Workleap.Extensions.Mongo.MongoClientOptions.Indexing.get -> Workleap.Extensions.Mongo.MongoIndexingOptions!
Workleap.Extensions.Mongo.MongoClientOptions.MongoClientOptions() -> void
Workleap.Extensions.Mongo.MongoClientOptions.MongoClientSettingsConfigurator.get -> System.Action<MongoDB.Driver.MongoClientSettings!>?
Workleap.Extensions.Mongo.MongoClientOptions.MongoClientSettingsConfigurator.set -> void
Workleap.Extensions.Mongo.MongoClientOptions.Telemetry.get -> Workleap.Extensions.Mongo.MongoTelemetryOptions!
Workleap.Extensions.Mongo.MongoCommandPerformanceAnalysisOptions
Workleap.Extensions.Mongo.MongoCommandPerformanceAnalysisOptions.EnableCollectionScanDetection.get -> bool
Workleap.Extensions.Mongo.MongoCommandPerformanceAnalysisOptions.EnableCollectionScanDetection.set -> void
Workleap.Extensions.Mongo.MongoCommandPerformanceAnalysisOptions.MongoCommandPerformanceAnalysisOptions() -> void
Workleap.Extensions.Mongo.MongoIndexingOptions
Workleap.Extensions.Mongo.MongoIndexingOptions.DistributedLockName.get -> string!
Workleap.Extensions.Mongo.MongoIndexingOptions.DistributedLockName.set -> void
Workleap.Extensions.Mongo.MongoIndexingOptions.LockAcquisitionTimeoutInSeconds.get -> int
Workleap.Extensions.Mongo.MongoIndexingOptions.LockAcquisitionTimeoutInSeconds.set -> void
Workleap.Extensions.Mongo.MongoIndexingOptions.LockMaxLifetimeInSeconds.get -> int
Workleap.Extensions.Mongo.MongoIndexingOptions.LockMaxLifetimeInSeconds.set -> void
Workleap.Extensions.Mongo.MongoIndexingOptions.MongoIndexingOptions() -> void
Workleap.Extensions.Mongo.MongoServiceCollectionExtensions
Workleap.Extensions.Mongo.MongoStaticOptions
Workleap.Extensions.Mongo.MongoStaticOptions.BsonSerializers.get -> System.Collections.Generic.IDictionary<System.Type!, MongoDB.Bson.Serialization.IBsonSerializer!>!
Workleap.Extensions.Mongo.MongoStaticOptions.ConventionPacks.get -> System.Collections.Generic.IList<Workleap.Extensions.Mongo.NamedConventionPack!>!
Workleap.Extensions.Mongo.MongoStaticOptions.GuidRepresentationMode.get -> MongoDB.Bson.GuidRepresentationMode
Workleap.Extensions.Mongo.MongoStaticOptions.GuidRepresentationMode.set -> void
Workleap.Extensions.Mongo.MongoStaticOptions.MongoStaticOptions() -> void
Workleap.Extensions.Mongo.MongoTelemetryOptions
Workleap.Extensions.Mongo.MongoTelemetryOptions.CaptureCommandText.get -> bool
Workleap.Extensions.Mongo.MongoTelemetryOptions.CaptureCommandText.set -> void
Workleap.Extensions.Mongo.MongoTelemetryOptions.IgnoredCommandNames.get -> System.Collections.Generic.ISet<string!>!
Workleap.Extensions.Mongo.MongoTelemetryOptions.MongoTelemetryOptions() -> void
Workleap.Extensions.Mongo.NamedConventionPack
Workleap.Extensions.Mongo.NamedConventionPack.NamedConventionPack() -> void
Workleap.Extensions.Mongo.Security.IMongoValueEncryptor
Workleap.Extensions.Mongo.Security.IMongoValueEncryptor.Decrypt(byte[]! bytes, Workleap.ComponentModel.DataAnnotations.SensitivityScope sensitivityScope) -> byte[]!
Workleap.Extensions.Mongo.Security.IMongoValueEncryptor.Encrypt(byte[]! bytes, Workleap.ComponentModel.DataAnnotations.SensitivityScope sensitivityScope) -> byte[]!
static Workleap.Extensions.Mongo.MongoServiceCollectionExtensions.AddMongo(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Workleap.Extensions.Mongo.MongoClientOptions!>? configure = null) -> Workleap.Extensions.Mongo.MongoBuilder!
static Workleap.Extensions.Mongo.MongoServiceCollectionExtensions.AddCollectionConfigurations(this Workleap.Extensions.Mongo.MongoBuilder! builder, params System.Reflection.Assembly![]! assemblies) -> Workleap.Extensions.Mongo.MongoBuilder!
Workleap.Extensions.Mongo.Indexing.IMongoIndexer.UpdateIndexesAsync(string? clientName = null, string? databaseName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Workleap.Extensions.Mongo.MongoCollectionBuilder
Workleap.Extensions.Mongo.MongoCollectionBuilder.MongoCollectionBuilder() -> void
Workleap.Extensions.Mongo.MongoCollectionBuilder<TDocument>
Workleap.Extensions.Mongo.MongoCollectionBuilder<TDocument>.BsonClassMap(System.Action<MongoDB.Bson.Serialization.BsonClassMap<TDocument!>!>! classMapInitializer) -> Workleap.Extensions.Mongo.IMongoCollectionBuilder<TDocument!>!
Workleap.Extensions.Mongo.MongoCollectionBuilder<TDocument>.CollectionName(string! collectionName) -> Workleap.Extensions.Mongo.IMongoCollectionBuilder<TDocument!>!
Workleap.Extensions.Mongo.MongoCollectionBuilder<TDocument>.IndexProvider<TIndexProvider>() -> Workleap.Extensions.Mongo.IMongoCollectionBuilder<TDocument!>!
Workleap.Extensions.Mongo.MongoCollectionBuilder<TDocument>.MongoCollectionBuilder() -> void