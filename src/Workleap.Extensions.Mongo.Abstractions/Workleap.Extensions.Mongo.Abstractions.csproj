<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>net472;net6.0;netstandard2.0</TargetFrameworks>
    <IsPackable>True</IsPackable>
    <IncludeSymbols>True</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <AssemblyTitle>Workleap.Extensions.Mongo.Abstractions</AssemblyTitle>
    <PackageId>Workleap.Extensions.Mongo.Abstractions</PackageId>
    <RootNamespace>Workleap.Extensions.Mongo</RootNamespace>
    <PackageReadmeFile>README.md</PackageReadmeFile>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\Workleap.Extensions.Mongo.Analyzers\Workleap.Extensions.Mongo.Analyzers.csproj" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="GSoft.ComponentModel.DataAnnotations" Version="1.1.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.PublicApiAnalyzers" Version="3.3.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="MongoDB.Driver" Version="2.20.0" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net472' Or '$(TargetFramework)' == 'netstandard2.0' ">
    <PackageReference Include="Microsoft.Bcl.AsyncInterfaces" Version="6.0.0" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\README.md" Link="README.md" Pack="true" PackagePath="\" />
  </ItemGroup>

  <ItemGroup>
    <InternalsVisibleTo Include="Workleap.Extensions.Mongo" />
  </ItemGroup>

  <PropertyGroup>
    <!--
    Here we use some advanced MSBuild to embed our Roslyn analyzers into the generated package.
    The idea is to only insert the analyzers DLL into the corresponding analyzers directory (analyzers\dotnet\cs) of the NuGet package, during the packing phase.
    Here is the official documentation about this process: https://learn.microsoft.com/en-us/nuget/reference/msbuild-targets#targetsfortfmspecificcontentinpackage
    This technique was originally found here: https://stackoverflow.com/q/40396161/825695
    Microsoft does something similar with several packages, including the source generators embed in Microsoft.Extensions.Logging.Abstractions.
    However their MSBuild engineering is way more complicated and reused through the entire .NET runtime monorepo. We don't want that kind of complexity here.
    -->
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>

  <Target Name="CopyProjectReferencesToPackage" DependsOnTargets="BuildOnlySettings;ResolveReferences">
    <ItemGroup>
      <_OurPrivateAssetsFiles Include="@(ReferenceCopyLocalPaths-&gt;WithMetadataValue('ReferenceSourceTarget', 'ProjectReference')-&gt;WithMetadataValue('PrivateAssets', 'All'))" />
      <_OurRoslynAnalyzersDlls Include="@(_OurPrivateAssetsFiles)" Condition=" '%(Filename)' == 'Workleap.Extensions.Mongo.Analyzers' And '%(Extension)' == '.dll' " />
    </ItemGroup>

    <!-- Prevent copying the Roslyn analyzer files multiple times (because this project targets multiple frameworks) -->
    <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard2.0' ">
      <TfmSpecificPackageFile Include="@(_OurRoslynAnalyzersDlls)" PackagePath="analyzers\dotnet\cs" />
    </ItemGroup>
  </Target>
</Project>
